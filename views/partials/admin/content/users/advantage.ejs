<div class="flex flex-col pb-4">
    <h1 class="text-xl font-semibold text-gray-900">Advanced Account Management</h1>
    <p class="text-sm text-gray-700">Manage teacher accounts.</p>
</div>

<form class="flex flex-col justify-between gap-4 mt-4 p-4 bg-white rounded" id="createAdvantageForm" onsubmit="handleCreateAdvantage(event)">
    <div class="grid grid-cols-5 gap-4">
        <div class="flex flex-col gap-2 col-span-2">
            <label for="advantageUsername" class="block text-sm font-medium text-gray-700">Username</label>
            <input type="text" id="advantageUsername" name="username" class="h-10 px-2 w-full rounded-md border-gray-300 shadow-sm text-sm" placeholder="teacher" required>
        </div>
        <div class="flex flex-col gap-2 col-span-2">
            <label for="advantagePassword" class="block text-sm font-medium text-gray-700">Password</label>
            <input type="password" id="advantagePassword" name="password" class="h-10 px-2 w-full rounded-md border-gray-300 shadow-sm text-sm" placeholder="Password" required>
        </div>
        <div class="flex justify-end items-center">
            <button type="submit" class="h-8 px-4 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm font-medium cursor-pointer">Create Teacher Account</button>
        </div>
    </div>
</form>


<table class="min-w-full divide-y divide-gray-300">
    <thead class="bg-gray-50">
        <tr>
            <th scope="col" class="w-1/12 p-3 text-left text-sm font-semibold text-gray-900">
                No.
            </th>
            <th scope="col" class="w-1/12 p-3 text-left text-sm font-semibold text-gray-900">UID</th>
            <th scope="col" class="w-2/12 p-3 text-left text-sm font-semibold text-gray-900">Username</th>
            <th scope="col" class="w-4/12 p-3 text-left text-sm font-semibold text-gray-900">Email</th>
            <th scope="col" class="w-1/12 p-3 text-left text-sm font-semibold text-gray-900">Role</th>
            <th scope="col" class="w-2/12 p-3 text-left text-sm font-semibold text-gray-900">Operation</th>
        </tr>
    </thead>
    <tbody class="divide-y divide-gray-200 bg-white">
        <% users.forEach((user, index)=> { %>
            <tr>
                <td class="whitespace-nowrap p-3 text-sm font-medium text-gray-900">
                    <%= index + 1 %>
                </td>
                <td class="whitespace-nowrap p-3 text-sm font-medium text-gray-900">
                    <%= user.id %>
                </td>
                <td class="whitespace-nowrap p-3 text-sm font-medium text-gray-900">
                    <%= user.username %>
                </td>
                <td class="whitespace-nowrap p-3 text-sm text-gray-500">
                    <%= user.email %>
                </td>
                <td class="whitespace-nowrap p-3 text-sm text-gray-500">
                    <%= user.role_name %>
                </td>
                <td class="whitespace-nowrap p-3 text-sm text-gray-500">
                    <button class="mr-4 text-yellow-600 hover:text-yellow-400 text-sm font-medium cursor-pointer" onclick="handleResetPassword('<%= user.id %>')">Reset Password</button>
                    <button class="mr-4 text-red-600 hover:text-red-400 text-sm font-medium cursor-pointer" onclick="handleDelete('<%= user.id %>')">Delete</button>
                </td>
            </tr>
            <% }); %>
    </tbody>
</table>


<script>
async function handleCreateAdvantage(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    try {
        const response = await fetch('/admin/users/advantage', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        const result = await response.json();
        if (result.success) {
            alert(result.message);
            form.reset();
            window.location.reload();
        } else {
            alert(result.message || 'Failed to create teacher account, please try again');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to create teacher account, please try again');
    }
}

async function handleResetPassword(userId) {
    const newPassword = prompt('Please enter a new password:');
    if (!newPassword) return;

    try {
        const response = await fetch('/admin/users/password', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                userIds: [userId],
                password: newPassword
            })
        });

        const result = await response.json();
        if (result.success) {
            alert(result.message);
        } else {
            alert(result.message || 'Failed to reset password, please try again');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to reset password, please try again');
    }
}

async function handleDelete(userId) {
    if (!confirm('Are you sure you want to delete this user? This action cannot be undone!')) {
        return;
    }

    try {
        const response = await fetch('/admin/users', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                userIds: [userId]
            })
        });

        const result = await response.json();
        if (result.success) {
            alert(result.message);
            // After successful deletion, refresh the page
            window.location.reload();
        } else {
            alert(result.message || 'Failed to delete, please try again');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to delete, please try again');
    }
}
</script>